@import 'styles/base';

// Get line height of a font scale at a specified breakpoint
@function legco-get-line-height($font-scale, $from) {
  $responsive-font-map: map-get($legco-typography-scale, $font-scale);
  $font-map: map-get($responsive-font-map, $from);
  $line-height: map-get($font-map, "line-height");

  @return $line-height;
}

// Scale of the checkbox label
$legco-font-scale: 19;
// Height of the container
$legco-container-height: 40px;
$legco-touch-target-size: 44px;
// Size of the checkbox widget
$legco-checkbox-size: 40px;

.legco-checkbox {
  position: relative;
  margin-bottom: legco-get-space(2);

  // Create space for the the checkbox widget
  padding-left: $legco-checkbox-size;

  height: $legco-container-height;

  // Font size and line height
  @include legco-responsive-typography($legco-font-scale);

  color: $legco-text-color;
  @include legco-media-query($media-type: print) {
    color: $legco-print-text-color;
  }

  &:last-child,
  &:last-of-type {
    margin-bottom: 0;
  }
}

.legco-checkbox__input {
  // Since touch target is slightly larger than the checkbox widget,
  // we need to offset the difference.
  $input-offset: ($legco-touch-target-size - $legco-checkbox-size) / 2;

  // Hide the native checkbox
  opacity: 0;

  position: absolute;
  top: - $input-offset;
  left: - $input-offset;

  margin: 0;

  width: $legco-touch-target-size;
  height: $legco-touch-target-size;

  cursor: pointer;

  // Move touch target on the top of the stacking context to
  // show focus state correctly.
  z-index: 1;
}

.legco-checkbox__label {
  $line-height: legco-get-line-height($legco-font-scale, null);
  $padding-top-bottom: ($legco-container-height - $line-height) / 2;

  // We don't want the label to span the entire container, thus
  // we make it float to shrink the size.
  float: left;

  // Center the label vertically
  padding-top: $padding-top-bottom;
  padding-bottom: $padding-top-bottom;

  // Since line height responds to device size, we need to re-calculate
  // top and bottom paddings.
  @include legco-media-query($from: tablet) {
    $line-height: legco-get-line-height($legco-font-scale, tablet);
    $padding-top-bottom: ($legco-container-height - $line-height) / 2;

    padding-top: $padding-top-bottom;
    padding-bottom: $padding-top-bottom;  
  }

  padding-left: legco-get-space(3);
  padding-right: legco-get-space(3);

  cursor: pointer;
  // remove 300ms pause on mobile
  touch-action: manipulation;
}

// ðŸ”² Checkbox widget
.legco-checkbox__label::before {
  content: "";

  position: absolute;
  top: ($legco-container-height - $legco-checkbox-size) / 2;
  left: 0;

  width: $legco-checkbox-size;
  height: $legco-checkbox-size;
  border: $legco-border-width-form-element solid currentColor;
  background: transparent;
}

// âœ” Check mark
//
// The check mark is a box with a border on the left and bottom side (|____)
// rotated 45 degrees
.legco-checkbox__label::after {
  $checkmark-width: 18px;
  $checkmark-height: 7px;
  $checkmark-border-width: $legco-border-width;
  $checkmark-box-width: $checkmark-width + $checkmark-border-width;
  $checkmark-box-height: $checkmark-height * 2 + $checkmark-border-width;

  box-sizing: content-box;
  content: "";

  // Align check mark with the checkbox widget
  //
  // Check mark has a full width of `$legco-checkmark-width + $legco-border-width` and
  // a full height of `$legco-checkmark-height + $legco-border-width`.
  //
  // We want the long edge to go through the center of the checkbox widget, so we multiply
  // the height by 2 to offset the effects of short edge on vertical position.
  position: absolute;
  top: ($legco-container-height - $checkmark-box-height) / 2;
  left: ($legco-checkbox-size - $checkmark-box-width) / 2;

  width: $checkmark-width;
  height: $checkmark-height;

  transform: rotate(-45deg);
  border: solid;
  border-width: 0 0 $checkmark-border-width $checkmark-border-width;

  // Fix bug in IE11 caused by transform rotate (-45deg).
  border-top-color: transparent;

  // Checkbox is unchecked by default
  opacity: 0;

  background: transparent;
}

// Focused state
.legco-checkbox__input:focus + .legco-checkbox__label::before {
  border-width: 4px;
  box-shadow: 0 0 0 $legco-focus-width $legco-focus-color;
}

// Selected state
.legco-checkbox__input:checked + .legco-checkbox__label::after {
  // Show checkmark when the checkbox is selected
  opacity: 1;
}

// Small checkbox
.legco-checkbox--small {
  // Size of the small checkbox widget
  $legco-checkbox-size: 24px;

  margin-bottom: legco-get-space(1);
  // Make space for the checkbox widget
  padding-left: $legco-checkbox-size;
  @include legco-clearfix;

  .legco-checkbox__input {
    // Input has absolute positioning, and is hidden.
    $input-offset: ($legco-touch-target-size - $legco-checkbox-size) / 2;
    // We shift the input into the left margin so that the visible edge of the
    // input and the checkbox widget is aligned.
    left: - $input-offset;
  }

  .legco-checkbox__label {
    // Touch area offset
    $input-offset: ($legco-touch-target-size - $legco-checkbox-size) / 2;
    // Create space for the touch target visual feedback.
    //
    // Should there be no left padding, the label would touch the right
    // edge of the checkbox widget.
    padding-left: $input-offset;
  }

  // ðŸ”² Checkbox widget
  .legco-checkbox__label::before {
    // Since the checkbox size has changed, we need to re-caculate the
    // top offset.
    top: ($legco-container-height - $legco-checkbox-size) / 2;
    width: $legco-checkbox-size;
    height: $legco-checkbox-size;
  }

  // âœ” Check mark
  .legco-checkbox__label::after {
    $checkmark-width: 9px;
    $checkmark-height: 3.5px;
    $checkmark-border-width: 3px;
    $checkmark-box-width: $checkmark-width + $checkmark-border-width;
    $checkmark-box-height: $checkmark-height * 2 + $checkmark-border-width;

    top: ($legco-container-height - $checkmark-box-height) / 2;
    left: ($legco-checkbox-size - $checkmark-box-width) / 2;

    width: $checkmark-width;
    height: $checkmark-height;

    border-width: 0 0 $checkmark-border-width $checkmark-border-width;
  }

  &:hover {
    // Show a grey background when the checkbox is hovered over.
    //
    // We do this because the touch target is much larger than the visible
    // checkbox widget, so we need to provide feedback to the user as to
    // which checkbox they will select when their cursor is outside of the
    // the visible area.
    .legco-checkbox__input:not(:disabled) +
    .legco-checkbox__label::before {
      box-shadow: 0 0 0 $legco-hover-width $legco-hover-color;
    }

    // Since we've overriden the box shadow provided by the focus state, we
    // need to refine that too.
    //
    // We need two box shadows to 1. restore the original focus state and
    // 2. indicate the hover state.
    .legco-checkbox__input:focus +
    .legco-checkbox__label::before {
      box-shadow: 
        0 0 0 $legco-focus-width $legco-focus-color, // 1
        0 0 0 $legco-hover-width $legco-hover-color; // 2
    }
  }

  // For devices that can't hover (e.g. touch devices), don't
  // provide a hover state. Since we set the hover state 
  // before, We need to manually undo it.
  @media (hover: none), (pointer: coarse) {
    &:hover {
      .legco-checkbox__input:not(:disabled) +
      .legco-checkbox__label::before {
        box-shadow: initial;
      }
  
      .legco-checkbox__input:focus +
      .legco-checkbox__label::before {
        box-shadow: 0 0 0 $legco-focus-width $legco-focus-color;
      }
    }  
  }
}